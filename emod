#!/usr/bin/env python
#-*-coding:UTF-8-*-

"""emod is a utility for Gentoo Linux based systems which can edit flags of a
particular ebuild. This was originally developped to avoid forgetting a ">" when
running "echo app-dummy/example -qt gtk >> /etc/portage/package.use" for
instance and then overwrite the file. But this also enables to edit already
existing flags and sorts the lines in alphabetical order."""

import os, sys
from argparse import ArgumentParser

__author__  = "Antoine Pinsard"
__email__   = "antoine.pinsard@member.fsf.org"
__version__ = "1.1"
__date__    = "2013-02-17"

class cilist(list):
    """Case insensitive list."""
    def __contains__(self, value):
        return value.upper() in [str(val).upper() for val in self]

PKG_FILE = "/etc/portage/package.%s"
PKG_TYPES = cilist(['accept_keywords', 'env', 'keywords', 'license', 'mask',
    'properties', 'unmask', 'use'])

# Parse arguments
parser = ArgumentParser(description="Ease your /etc/portage/package.* edition.",
    usage="%(prog)s [-h] atom [-e flags] [-d flags] [-p] [-t type]")
parser.add_argument('atom', type=str, help="[<|>][=]ebuild")
parser.add_argument('--enable', '-e', type=str, nargs='+', metavar='flag',
    help="A list of flags to enable for the specified ebuild.")
parser.add_argument('--disable', '-d', type=str, nargs='+', metavar='flag',
    help="A list of flags to disable for the specified ebuild.")
parser.add_argument('--prune', '-p', action='store_true',
    help="Remove all custom useflags of the specified ebuild.")
parser.add_argument('--type', '-t', type=str, default="use", choices=PKG_TYPES,
    help="Specify the type of package file (default is use).")
args = parser.parse_args()

category  = args.atom.split('/')[0].translate(None, '<=>')
pkg_type  = args.type.lower()
PKG_FILE %= pkg_type

# Determine whether package.{pkg_type} is a file or a directory.
# If it doesn't exist, create it as a directory.
if os.path.exists(PKG_FILE):
    if os.path.isdir(PKG_FILE):
        PKG_FILE = os.path.join(PKG_FILE, category)
else:
    try:
        os.mkdir(PKG_FILE, mode=0755)
    except OSError:
        sys.exit("Unable to create directory %s. Are you root?")
    PKG_FILE = os.path.join(PKG_FILE, category)

# Read the current file if exists.
if os.path.exists(PKG_FILE):
    try:
        f = open(PORTAGE_FILE)
        lines = f.readlines()
        f.close()
    except IOError:
        sys.exit("Unable to read %s" % PORTAGE_FILE)
else:
    lines = []

if pkg_type in ['mask', 'unmask']:
    # Handle particular case of package.(un)mask that do not accept arguments.
    if args.prune:
        try:
            lines.remove(args.atom)
        except ValueError:
            sys.exit("%s is not %sed." % (args.atom, pkg_type))
    else:
        if args.atom in lines:
            sys.exit("%s is already %sed." % (args.atom, pkg_type))
        else:
            lines.append(args.atom)
            lines.sort()
else:
    # Retrieve the current arguments (flags, properties, keywords...) if exist.
    arguments = []
    for line in lines:
        if line.startswith(args.atom + " "):
            sys.stdout.write("Old line: " + line)
            arguments = line.split()[1:]
            lines.remove(line) # We remove the line to update it.
            break
    if not arguments:
        print("No argument currently defined for %s." % args.atom)
    
    # Prune arguments
    if args.prune:
        arguments = []

    # Disable arguments
    if args.disable:
        for argument in args.disable:
            try:
                arguments.remove(argument)
            except ValueError:
                print("warning: %s is not enabled!" % argument)

    # Enable arguments
    if args.enable:
        for argument in args.enable:
            if argument in arguments:
                print("warning: %s is already enabled!" % argument)
            else:
                arguments.append(argument)

    # Update the line
    if arguments:
        arguments.sort()
        line = args.atom + ' ' + ' '.join(arguments) + '\n'
        sys.stdout.write("New line: " + line)
        lines.append(line)
        lines.sort()

# TODO Check file validity according to `man portage(5)`.
# if args.check:
#   ...

# Save changes
try:
    f = open(PKG_FILE, 'w')
    f.write(''.join(lines))
    f.close()
except IOError:
    sys.exit("Unable to write in %s, are you root?" % PKG_FILE)

